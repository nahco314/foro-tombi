use std::{env, fs, path::PathBuf};

#[derive(serde::Deserialize)]
struct EmbeddingSchemaData {
    url: String,
    file_match: String,
    content: String,
}

fn main() {
    const JSON_SRC: &str = "src/all_json_schema.json";
    println!("cargo:rerun-if-changed={JSON_SRC}");
    let json = fs::read_to_string(JSON_SRC).expect("read all_json_schema.json");

    let data: Vec<EmbeddingSchemaData> =
        serde_json::from_str(&json).expect("parse all_json_schema.json");

    let out_dir = PathBuf::from(env::var("OUT_DIR").unwrap());
    let dest = out_dir.join("all_json_schema.rs");

    let mut rs = String::new();
    rs.push_str("// This file is generated by build.rs\n\n");
    rs.push_str("use crate::model::EmbeddedSchemaData;\n\n");

    rs.push_str(&format!(
        "pub const ALL_JSON_SCHEMAS: [EmbeddedSchemaData; {}] = [\n",
        data.len()
    ));

    for item in &data {
        rs.push_str("    EmbeddedSchemaData {\n");
        rs.push_str(&format!("        url: {:?},\n", item.url));
        rs.push_str(&format!("        file_match: {:?},\n", item.file_match));
        rs.push_str(&format!("        content: {:?},\n", item.content));
        rs.push_str("    },\n");
    }
    rs.push_str("];\n");

    fs::write(&dest, rs).expect("write generated all_json_schema.rs");
}
